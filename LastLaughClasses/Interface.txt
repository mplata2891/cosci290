//method for removing the current weapon's attack modifier value (weapon.atkMod)
	  //from the value of the totalAttack property
	  private void unequipCurrentWeapon(int currentWeaponAtk, int atkMod){
	    
	    //calls the setTotalAttack method
	    setTotalAttack((-currentWeaponAtk), atkMod);
	  }
	  
	  //method for adding the new weapon's attack modifier value (weapon.atkMod)
	  //to the value of the totalAttack property
	  private void equipNewWeapon(Weapon newWeapon, int newWeaponAtk, int atkMod){
	    
	    //assigns the value of newWeapon to weapon
	    this.weapon = newWeapon;
	    
	    //calls the setTotalAttack method
	    setTotalAttack(newWeaponAtk, atkMod);
	  }
	  
	  	  //method for removing the current armor's defense modifier value (armor.defMod)
	  //from the value of the totalDefense property
	  private void unequipCurrentArmor(int currentArmorDef, int defMod){
	    
	    //calls the setTotalDefense method
	    setTotalDefense((-currentArmorDef), defMod);
	  }
	  
	  //method for adding the new armor's defense modifier value (armor.defMod)
	  //to the value of the totalDefense property
	  private void equipNewArmor(int newArmorDef, int defMod){
	    
	    //calls the setTotalArmor method
	    setTotalDefense(newArmorDef, defMod);
	  }
	  
	  //method for removing the current Item's attribute modifier values
	  //from the player's current attribute values
	  private void unequipCurrentItem(Item currentItem){
	    
	    //calls removeAttributeModifiers method
	    removeAttributeModifiers(currentItem);
	  }
	  
	  //method for adding the new Item's attribute modifier values
	  //to the player's base attribute values, then updates the
	  //attack, defense, and skill modifiers
	  private void equipNewItem(Item newItem){
	    
	    //calls the applyAttributeModifiers method
	    applyAttributeModifiers(newItem);
	    
	    //calls the setAttackModifier method
	    setAttackModifier(this.strength);
	    
	    //calls the setDefenseModifier method
	    setDefenseModifier(this.toughness);
	    
	    //calls the setSkillModifier method
	    setSkillModifier(this.intelligence);
	  }
	  
	  //method that subtracts the current item's attribute modifier values
	  //from the players current attribute values
	  private void removeAttributeModifiers(Item currentItem){
	    
	    //subtracts the current item's strength modifier from the
	    //player's current strength
	    this.strength -= currentItem.getStrMod();
	    
	    //subtracts the current item's toughness modifier from the
	    //player's current toughness
	    this.toughness -= currentItem.getTufMod();
	    
	    //subtracts the current item's intelligence modifier from the
	    //player's current intelligence
	    this.intelligence -= currentItem.getSklMod();
	  }
	  
	  //method that adds the new item's attribute modifier values
	  //to the players base attribute values
	  private void applyAttributeModifiers(Item newItem){
	    
	    //adds the new item's strength modifier to the player's
	    //base strength
	    this.strength += newItem.getStrMod();
	    
	    //adds the new item's toughness modifier to the player's
	    //base toughness
	    this.toughness += newItem.getTufMod();
	    
	    //adds the new item's intelligence modifier to the player's
	    //base intelligence
	    this.intelligence += newItem.getSklMod();
	  }